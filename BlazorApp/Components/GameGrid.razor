@using Abstractions
@typeparam TPlayer where TPlayer : Player
@typeparam TPiece where TPiece : Piece
@typeparam TGameState where TGameState : GameState<TPlayer, TPiece>

@if (!Visible) return;
@if (State is null) return;

<style>
	.game-grid {
	display: grid;
	grid-template-columns: repeat(@State.Width, 1fr);
	grid-template-rows: repeat(@State.Height, 1fr);
	}

	.game-grid > div {
	border: 1px solid lightgray;
	box-sizing: border-box;
	}

	.valid-move {
	background-color: lightgreen;
	}
</style>

<div class="game-grid" style="height:100%">
	@for (int y = 1; y <= State.Height; y++)
	{
		for (int x = 1; x <= State.Width; x++)
		{
			var piece = State.GetPiece(new(x, y));
			Location location = new(x, y);
			<div style="@Style" @onclick="(args) => CellClick(location, piece)" class="@ClassName(x, y)">
				@ChildContent(new() { Location = location, Piece = piece })
			</div>
		}
	}
</div>
<p class="mt-3">player name = @PlayerName, current turn = @State?.CurrentPlayer</p>

@code {
	private PlayActions Action = PlayActions.Select;
	private TPiece? SelectedPiece;
	private HashSet<Location> ValidMoves = [];

	[Parameter] public bool Visible { get; set; } = true;
	[Parameter] public TGameState? State { get; set; }	
	[Parameter] public RenderFragment<GameCell> ChildContent { get; set; } = (cell) => @<span>@cell.Location.X, @cell.Location.Y</span>;
	[Parameter] public EventCallback<PlayArgs> OnPlay { get; set; }

	[Parameter] public string? PlayerName { get; set; }	

	private string Style => $"cursor:{(IsMyTurn ? "pointer" : "not-allowed")}";

	private string ClassName(int x, int y) => $"{(ValidMoves.Contains(new(x, y)) ? "valid-move" : string.Empty)}";

	public class GameCell
	{
		public required Location Location { get; init; }
		public TPiece? Piece { get; init; }
	}

	private bool IsMyTurn => PlayerName == State?.CurrentPlayer;

	private enum PlayActions
	{
		Select,
		Execute
	}

	private async Task CellClick(Location location, TPiece? piece)
	{		
		if (!IsMyTurn) return;

		if (Action == PlayActions.Select)
		{
			if (piece is null) return;
			SelectedPiece = piece;
			ValidMoves = State!.GetValidMoves(State.CurrentPlayer!, piece);
			Action = PlayActions.Execute;			
		}
		else if (Action == PlayActions.Execute)
		{
			var (msg, parameters) = State!.Play(State.CurrentPlayer!, SelectedPiece!, location);
			await OnPlay.InvokeAsync(new PlayArgs { LogMessage = msg, LogParams = parameters });
			Action = PlayActions.Select;
			SelectedPiece = null;
			ValidMoves.Clear();
		}

		StateHasChanged();
	}

	public class PlayArgs
	{
		public string? LogMessage { get; init; }
		public object?[] LogParams { get; init; } = [];
	}
}

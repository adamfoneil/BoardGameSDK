@using Abstractions
@typeparam TPlayer where TPlayer : Player
@typeparam TPiece where TPiece : Piece
@typeparam TGameState where TGameState : GameState<TPlayer, TPiece>

@if (!Visible) return;
@if (State is null) return;

<style>
	.game-grid {
	display: grid;
	grid-template-columns: repeat(@State.Width, 1fr);
	grid-template-rows: repeat(@State.Height, 1fr);
	}

	.game-grid > div {
	border: 1px solid lightgray;
	box-sizing: border-box;
	}
</style>

<div class="game-grid" style="height:100%">
	@for (int y = 1; y <= State.Height; y++)
	{
		for (int x = 1; x <= State.Width; x++)
		{
			var pieces = State.GetPieces(new(x, y));
			Location location = new(x, y);
			<div style="@Style" @onclick="(args) => CellClick(location, pieces)">
				@ChildContent(new() { Location = location, Pieces = pieces })
			</div>
		}
	}
</div>
<p>player name = @PlayerName, current turn = @State?.CurrentPlayer</p>

@code {
	private PlayActions Action = PlayActions.Select;

	[Parameter] public bool Visible { get; set; } = true;
	[Parameter] public TGameState? State { get; set; }	
	[Parameter] public RenderFragment<GameCell> ChildContent { get; set; } = (cell) => @<span>@cell.Location.X, @cell.Location.Y</span>;
	/// <summary>
	/// if there are multiple pieces in a cell, this function selects which one the player acts on
	/// </summary>
	[Parameter] public Func<TPiece[], TPiece?> PieceSelector { get; set; } = (pieces) => pieces.FirstOrDefault();

	[Parameter] public string? PlayerName { get; set; }	

	private string Style => $"cursor:{(IsMyTurn ? "pointer" : "not-allowed")}";	

	public class GameCell
	{
		public required Location Location { get; init; }
		public required TPiece[] Pieces { get; init; } = [];
	}

	private bool IsMyTurn => PlayerName == State?.CurrentPlayer;

	private enum PlayActions
	{
		Select,
		Execute
	}

	private void CellClick(Location location, TPiece[] pieces)
	{
		if (!IsMyTurn) return;

		var piece = PieceSelector(pieces);
		if (piece is null) return;

		if (Action == PlayActions.Select)
		{
			Action = PlayActions.Execute;			
		}
		else if (Action == PlayActions.Execute)
		{
			Action = PlayActions.Select;
		}
	}
}

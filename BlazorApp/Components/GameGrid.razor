@using Abstractions
@typeparam TPlayer where TPlayer : Player
@typeparam TPiece where TPiece : Piece
@typeparam TGameState where TGameState : GameState<TPlayer, TPiece>

@if (!Visible) return;
@if (State is null) return;

<style>
	.game-grid {
	display: grid;
	grid-template-columns: repeat(@State.Width, 1fr);
	grid-template-rows: repeat(@State.Height, 1fr);
	}

	.game-grid > div {
	border: 1px solid lightgray;
	box-sizing: border-box;
	}

	.valid-move {
	background-color: lightgreen;
	}
</style>

<div class="game-grid" style="height:100%">
	@for (int y = 1; y <= State.Height; y++)
	{
		for (int x = 1; x <= State.Width; x++)
		{
			Location location = new(x, y);
			var piece = State.GetPiece(location);			
			<div style="@Style(x, y)" @onclick="(args) => CellClick(location, piece)" class="@ClassName(x, y)">
				@ChildContent(new() { Location = location, Piece = piece })
			</div>
		}
	}
</div>
<p class="mt-3">player name = @PlayerName, current turn = @State?.CurrentPlayer</p>

@if (CurrentChallenge != null && ChallengeComponent != null)
{
	<div class="mt-3">
		@ChallengeComponent(CurrentChallenge)
	</div>
}

@code {
	private PlayActions Action = PlayActions.Select;
	private TPiece? SelectedPiece;
	private HashSet<Location> ValidMoves = [];
	private Location? PriorLocation;
	private object? CurrentChallenge;

	[Parameter] public bool Visible { get; set; } = true;
	[Parameter] public TGameState? State { get; set; }	
	[Parameter] public RenderFragment<GameCell> ChildContent { get; set; } = (cell) => @<span>@cell.Location.X, @cell.Location.Y</span>;
	[Parameter] public EventCallback OnPlay { get; set; }
	[Parameter] public EventCallback<object> OnChallenge { get; set; }
	[Parameter] public RenderFragment<object>? ChallengeComponent { get; set; }

	[Parameter] public string? PlayerName { get; set; }	

	private string Style(int x, int y) => $"cursor:{(IsMyTurn && (ValidMoves.Contains(new(x, y)) || IsOneOfMyPieces(x, y)) ? "pointer" : "not-allowed")}";

	private bool IsOneOfMyPieces(int x, int y) => State!.PlayerPieces[State.CurrentPlayer!].Any(p => p.Location == new Location(x, y));

	private string ClassName(int x, int y) => $"{(ValidMoves.Contains(new(x, y)) ? "valid-move" : string.Empty)}";

	public class GameCell
	{
		public required Location Location { get; init; }
		public TPiece? Piece { get; init; }
	}

	private bool IsMyTurn => PlayerName == State?.CurrentPlayer;

	private enum PlayActions
	{
		Select,
		Execute,
		Challenge
	}

	private async Task CellClick(Location location, TPiece? piece)
	{
		try
		{
			if (!IsMyTurn) return;
			if (Action == PlayActions.Execute && piece != null && !ValidMoves.Contains(piece.Location)) return;
			if (Action == PlayActions.Challenge) return; // Prevent actions during a challenge

			if (Action == PlayActions.Select)
			{
				if (piece is null) return;
				SelectedPiece = piece;
				PriorLocation = piece.Location;
				ValidMoves = State!.GetValidMoves(State.CurrentPlayer!, piece);
				Action = PlayActions.Execute;
			}
			else if (Action == PlayActions.Execute)
			{
				TPiece? attackedPiece = null;
				if (State!.ActivePiecesByLocation.TryGetValue(location, out var existingPiece) && 
					existingPiece.PlayerName != State.CurrentPlayer)
				{
					attackedPiece = existingPiece;
				}

				// If there's a piece to attack, initiate a challenge
				if (attackedPiece != null && State is dynamic stateWithChallenge)
				{
					// Create a challenge
					try
					{
						// Try to get a current challenge property or method from the state
						var challenge = stateWithChallenge.CreateChallenge(
							State.CurrentPlayer!, 
							SelectedPiece!, 
							attackedPiece, 
							location, 
							PriorLocation!);

						// If we got a challenge, set it as current and change action state
						if (challenge != null)
						{
							CurrentChallenge = challenge;
							Action = PlayActions.Challenge;
							await OnChallenge.InvokeAsync(challenge);
							StateHasChanged();
							return;
						}
					}
					catch
					{
						// Fall back to regular play if challenge creation fails
					}
				}

				// Proceed with normal play if no challenge was created
				var currentPlayer = State!.Play(State.CurrentPlayer!, SelectedPiece!, location, PriorLocation!);
				await OnPlay.InvokeAsync();
				Action = PlayActions.Select;
				SelectedPiece = null;
				PriorLocation = null;
				ValidMoves.Clear();				
			}

			StateHasChanged();
		}
		catch (Exception exc)
		{
			await Dialog.Alert(exc.Message);
		}		
	}

	// Method to resolve a challenge
	public async Task ResolveChallenge(bool attackerWins)
	{
		if (Action != PlayActions.Challenge || CurrentChallenge == null) return;

		try
		{
			if (State is dynamic stateWithChallenge)
			{
				var currentPlayer = stateWithChallenge.ResolveChallenge(CurrentChallenge, attackerWins);
				
				CurrentChallenge = null;
				Action = PlayActions.Select;
				SelectedPiece = null;
				PriorLocation = null;
				ValidMoves.Clear();
				
				await OnPlay.InvokeAsync();
				StateHasChanged();
			}
		}
		catch (Exception exc)
		{
			await Dialog.Alert(exc.Message);
		}
	}
}

@page "/Mini2P/{InstanceKey?}"
@inject StateManager StateManager
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager Nav
@inject ILogger<Page> Logger
@inject ApplicationEventRelay Relay
@implements IDisposable

<h3>Mini2P Game</h3>
<p>user = @user!.UserName, current player = @StateManager.State?.CurrentPlayer</p>

@if (GameInstances.Any())
{
	<ul>
		@foreach (var game in GameInstances)
		{
			<li><a href="@game.Url">@game.Id - @game.Url</a></li>
		}
	</ul>
}

<RadzenButton Click="NewGame" Disabled="user is null" Class="my-3" Text="Start Game" />

<GameGrid 
	TPlayer="Player" TPiece="Piece" TGameState="State"
	Visible="StateManager.IsLoaded" State="StateManager.State" PlayerName="@user!.UserName" OnPlay="SaveState">
	<ChildContent>
		@if (context.Piece != null)
		{
			<span>@context.Piece.Name</span>
		}
	</ChildContent>
</GameGrid>

@code {
	private ApplicationUser? user;
	private GameInstance[] GameInstances = [];

	[Parameter] public string? InstanceKey { get; set; }

	async Task NewGame()
	{
		var url = await StateManager.StartAsync(true, [(user!.UserName!, true), ("player2", true)]);
		Nav.NavigateTo(url, forceLoad: true);
	}

	protected override async Task OnInitializedAsync()
	{
		user = await CurrentUser.GetAsync();
		Relay.StateChanged += OnGameStateChanged;
	}

	protected override async Task OnParametersSetAsync()
	{
		Logger.LogDebug("Current user = {0}", user!.UserName ?? "<unknown>");

		if (InstanceKey is null)
		{
			using var db = DbFactory.CreateDbContext();
			GameInstances = await db.MyGames(user!.UserId, GameType.Mini2P).ToArrayAsync();
			return;
		}

		await StateManager.LoadAsync(InstanceKey);
	}

	private async void OnGameStateChanged(object? sender, StateChangeEventArgs e)
	{
		if (e.InstanceId != StateManager.InstanceId) return;
		if (e.ToPlayer != user!.UserName) return;
		StateManager.Update(e.Json);
		await InvokeAsync(StateHasChanged);
	}

	private async Task SaveState()
	{		
		await StateManager.SaveAsync();
		await Relay.StateChangedAsync(user!.UserName!, StateManager);
	}

	public void Dispose()
	{
		Relay.StateChanged -= OnGameStateChanged;
	}
}

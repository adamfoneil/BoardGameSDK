@page "/Mini1P/{InstanceKey?}"
@inject StateManager StateManager
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager Nav
@inject ILogger<Page> Logger
@inject ApplicationEventRelay Relay
@implements IDisposable

<h3>Mini1P Game</h3>
<p>user = @CurrentUser?.UserName</p>

@if (GameInstances.Any())
{
	<ul>
		@foreach (var game in GameInstances)
		{
			<li><a href="@game.Url">@game.Id - @game.Url</a></li>
		}
	</ul>
}

<FluentButton OnClick="NewGame" Disabled="CurrentUser is null" Class="my-3">Start Game</FluentButton>

<GameGrid TPlayer="Player" TPiece="Piece" TGameState="State"
		  Visible="StateManager.IsLoaded" State="StateManager.State" PlayerName="@CurrentUser?.UserName" OnPlay="SaveState">
	<ChildContent>
		@if (context.Piece != null)
		{
			<span>@context.Piece.Name</span>
		}
	</ChildContent>
</GameGrid>

@code {
	GameInstance[] GameInstances = [];

	[CascadingParameter] public ApplicationUser? CurrentUser { get; set; }

	[Parameter] public string? InstanceKey { get; set; }

	async Task NewGame(MouseEventArgs args)
	{
		var url = await StateManager.StartAsync(true, [(CurrentUser!.UserName!, true)]);
		Nav.NavigateTo(url, forceLoad: true);
	}

	protected override void OnInitialized()
	{
		Relay.StateChanged += OnGameStateChanged;
	}

	private async void OnGameStateChanged(object? sender, StateChangeEventArgs e)
	{
		if (e.InstanceId != StateManager.InstanceId) return;
		if (e.ToPlayer != CurrentUser?.UserName) return;
		StateManager.Update(e.Json);
		await InvokeAsync(StateHasChanged);
	}

	private async Task SaveState(PlayArgs args)
	{
		Logger.LogInformation(args.LogMessage, args.LogParams);
		await StateManager.SaveAsync();
	}

	public void Dispose()
	{
		Relay.StateChanged -= OnGameStateChanged;
	}
}
